<?xml version="1.0"?>
<!-- -->
<launch>

  <arg name="rl"                        default="true"/>
  <arg name="report"                    default="true"/>
  <!-- <arg name="rosbag"               default="rosbag.bag"/> -->
  <arg name="obstacle_avoidance"        default="true"/>

  <!-- Load Gazebo world -->
  <include file="$(find simulation_world)/launch/gazebo_rviz.launch">
    <arg name="launch_rviz" value="false"/>
    <arg name="world_name"  value="parkour_6.world"/>
    <arg name="publish_static_footprint_tf" value="false"/>
    <arg name="rl" value="$(arg rl)"/>
  </include>

  <!-- Launch move_base -->
  <include file="$(find simulation_slam)/launch/navigation.launch">
    <arg name="move_forward_only" value="true"/>
  </include>

  <!-- SLAM ARGUMENTS -->
  <arg name="camera"                    default="realsense"/>
  <arg name="frame_id"                  default="base_footprint"/>
  <!-- Point Cloud filtering -->
  <arg name="cloud_noise_filtering_radius"  default="0.10"/>
  <arg name="cloud_noise_filtering_min_neighbors"  default="8"/>
  <!-- Obstacle detection -->
  <arg name="proj_min_cluster_size"     default="20"/>
  <arg name="proj_max_ground_angle"     default="15"/>
  <arg name="proj_max_ground_height"    default="0.1"/>
  <arg name="proj_max_height_default"   default="1.2"/>
  <arg name="proj_max_height_rolling"   default="0.30"/>
  <arg name="proj_max_height_crawling"  default="0.255"/>
  <arg name="proj_max_height_nav"       default="0.150"/>

  <!-- Grid parameters -->
  <arg name="use_dual_map_msg"          default="false"/>
  <arg name="grid_resolution"           default="$(eval arg('cloud_noise_filtering_radius')/2)"/>
  <arg name="grid_size_meters"          default="40"/>
  <arg name="cost_crawling"             default="45"/>
  <arg name="cost_rolling"              default="30"/>
  <arg name="cost_transitioning"        default="50"/>

   <!-- SLAM -->
  <include file="$(find simulation_slam)/launch/rtabmap_advanced.launch">
    <arg name="frame_id"                            value="$(arg frame_id)"/>
    <arg name="rtabmap_args"                        value="--delete_db_on_start"/>
    <arg name="camera_info_topic"                   value="/$(arg camera)/color/camera_info"/>
    <arg name="depth_camera_info_topic"             value="/$(arg camera)/depth/camera_info"/>
    <arg name="rgb_topic"                           value="/$(arg camera)/color/image_raw"/>
    <arg name="depth_topic"                         value="/$(arg camera)/depth/image_rect_raw"/>
    <arg name="rviz"                                value="true"/>
    <arg name="rviz_cfg"                            value="$(find simulation_world)/rviz/m4_nav.rviz"/>
    <arg name="rtabmap_viz"                         value="false"/>
    <arg name="approx_sync_max_interval"            value="0.02"/>  <!-- To remove estimations based on rgb and depth shifted in time -->
    <!-- <arg name="odom_topic"                          value="/$(arg camera)/imu"/> -->
    <arg name="GridCellSize"                        value="$(arg grid_resolution)"/>
    <arg name="grid_size"                           value="$(arg grid_size_meters)"/>    <!-- 50 meters wide -->
    <arg name="OdomStrategy"                        value="1"/>
    <arg name="VisCorType"                          value="1"/>
    <arg name="OdomF2MMaxSize"                      value="1000"/>  <!-- reduced maximum features map size-->
    <arg name="VisMaxFeatures"                      value="600"/>   <!-- reduced maximum features extracted by image-->
    <arg name="RtabmapStartNewMapOnLoopClosure"     value="false"/>
    <arg name="RegForce3DoF"                        value="true"/>
    <arg name="OptimizerSlam2D"                     value="true"/>
    <arg name="cloud_noise_filtering_radius"        value="$(arg cloud_noise_filtering_radius)"/>
    <arg name="cloud_noise_filtering_min_neighbors" value="$(arg cloud_noise_filtering_min_neighbors)"/>
    <arg name="proj_max_ground_angle"               value="$(arg proj_max_ground_angle)"/>
    <arg name="proj_max_ground_height"              value="$(arg proj_max_ground_height)"/>
    <arg name="proj_max_height"                     value="$(arg proj_max_height_default)"/>
    <arg name="proj_min_cluster_size"               value="$(arg proj_min_cluster_size)"/>
  </include>

  <group unless="$(arg obstacle_avoidance)">
    <!-- Launch empty map to be used by planner -->
    <node name="empty_grid_pub_node" pkg="simulation_slam" type="empty_grid_pub.py" output="screen"/>
  </group>

  <node pkg="nodelet" type="nodelet" name="pcl_manager" args="manager" output="screen" />

  <!-- Create nav obstacles cloud -->
  <node pkg="nodelet" type="nodelet" name="passthrough" args="load pcl/PassThrough pcl_manager" output="screen">
    <remap from="~input" to="rtabmap/cloud_obstacles" />
    <remap from="~output" to="nav_detect_cloud" />
    <param name="filter_field_name" type="str" value="z"/>
    <param name="filter_limit_min" type="double" value="$(arg proj_max_ground_height)"/>
    <param name="filter_limit_max" type="double" value="$(arg proj_max_height_nav)"/>
    <param name="filter_limit_negative" type="bool" value="false"/>
  </node>

  <!-- Create nav gridmap -->
  <node name="single_pc_2_map_node" pkg="simulation_slam" type="single_pc_2_map.py" output="screen">
    <param name="input_cloud"           value="/nav_detect_cloud"/>
    <param name="output_map"            value="nav_grid_map"/>
    <param name="grid_resolution"      value="$(arg grid_resolution)"/>
    <param name="grid_size_meters"     value="$(arg grid_size_meters)"/>
  </node>

  <!-- Inflate nav gridmap -->
  <node name="inflate_grid" pkg="simulation_slam" type="inflate_grid.py" output="screen">
    <param name="input_grid"              value="/nav_grid_map"/>
    <param name="output_grid"             value="/nav_grid_map_inflated"/>
  </node>

  <group unless="$(arg rl)">
  
    <group if="$(arg use_dual_map_msg)">
    
      <!-- Launch dual gridmap nodes -->
      <node name="dual_pc_2_map_node" pkg="simulation_slam" type="dual_pc_2_map.py" output="screen">
        <param name="input_cloud"      value="rtabmap/cloud_obstacles"/>
        <param name="output_map"      value="dual_grid_map"/>
        <param name="output_map1"      value="crawl_grid_map"/>
        <param name="output_map2"      value="roll_grid_map"/>
        <param name="grid_resolution"      value="$(arg grid_resolution)"/>
        <param name="grid_size_meters"     value="$(arg grid_size_meters)"/>
        <param name="threshold_1"     value="$(arg proj_max_height_crawling)"/>
        <param name="threshold_2"     value="$(arg proj_max_height_rolling)"/>
      </node>
    
    </group>

    <group unless="$(arg use_dual_map_msg)">

      <!-- Launch passthrough filter nodes at specific height -->
      <node pkg="nodelet" type="nodelet" name="passthrough1" args="load pcl/PassThrough pcl_manager" output="screen">
        <remap from="~input" to="rtabmap/cloud_obstacles" />
        <remap from="~output" to="crawl_detect_cloud" />
        <param name="filter_field_name" type="str" value="z"/>
        <param name="filter_limit_min" type="double" value="$(arg proj_max_ground_height)"/>
        <param name="filter_limit_max" type="double" value="$(arg proj_max_height_crawling)"/>
        <param name="filter_limit_negative" type="bool" value="false"/>
      </node>

      <node pkg="nodelet" type="nodelet" name="passthrough2" args="load pcl/PassThrough pcl_manager" output="screen">
        <remap from="~input" to="rtabmap/cloud_obstacles" />
        <remap from="~output" to="roll_detect_cloud" />
        <param name="filter_field_name" type="str" value="z"/>
        <param name="filter_limit_min" type="double" value="$(arg proj_max_ground_height)"/>
        <param name="filter_limit_max" type="double" value="$(arg proj_max_height_rolling)"/>
        <param name="filter_limit_negative" type="bool" value="false"/>
      </node>
      
      <!-- Launch gridmap nodes -->
      <node name="single_pc_2_map_node1" pkg="simulation_slam" type="single_pc_2_map.py" output="screen">
        <param name="input_cloud"      value="/crawl_detect_cloud"/>
        <param name="output_map"      value="crawl_grid_map"/>
        <param name="grid_resolution"      value="$(arg grid_resolution)"/>
        <param name="grid_size_meters"     value="$(arg grid_size_meters)"/>
      </node>

      <node name="single_pc_2_map_node2" pkg="simulation_slam" type="single_pc_2_map.py" output="screen">
        <param name="input_cloud"           value="/roll_detect_cloud"/>
        <param name="output_map"            value="roll_grid_map"/>
        <param name="grid_resolution"      value="$(arg grid_resolution)"/>
        <param name="grid_size_meters"     value="$(arg grid_size_meters)"/>
      </node>
    
    </group>

    <!-- Merge gridmaps -->
    <node name="cost_map_node" pkg="simulation_slam" type="cost_map_node.py" output="screen">
      <param name="input_grid_rolling"      value="/roll_grid_map"/>
      <param name="input_grid_crawling"     value="/crawl_grid_map"/>
      <param name="use_dual_map_msg"        value="$(arg use_dual_map_msg)"/>
      <param name="input_grid_dual"         value="/dual_grid_map"/>
      <param name="cost_rolling"            value="$(arg cost_rolling)"/>  <!-- grid_cost_1 needs to be higher than grid_cost_2 as it will be inflated -->
      <param name="cost_crawling"           value="$(arg cost_crawling)"/>
      <param name="output_grid"             value="/merged_occupancy_grid"/>
    </node>

    <!-- Launch mode detection node -->
    <node name="mode_detect_node" pkg="simulation_slam" type="mode_detect_node.py" output="screen">
      <param name="cost_crawling"     value="$(arg cost_crawling)"/>
      <param name="cost_rolling"      value="$(arg cost_rolling)"/>
    </node>

  </group>

  <group if="$(arg report)">

    <!-- Launch goal status node -->
    <node name="goal_status_pub" pkg="simulation_slam" type="goal_status_pub.py" output="screen"/>

    <!-- Launch goal publisher node -->
    <node name="goal_pub" pkg="simulation_slam" type="goal_pub.py" output="screen"/>

    <!-- Launch rosbag node for report graphs. CAREFUL: IT KILLS THE ROS PROCESS WHEN REACHING AN OBSTACLES, COMMENT IT IF NOT FOR REPORT PURPOSES! -->
    <!-- <node name="rosbag_controller" pkg="simulation_slam" type="rosbag_controller.py" output="screen">
        <param name="rosbag"     value="$(arg rosbag)"/>
    </node> -->

    <!-- Launch power computation node -->
    <node name="power_computation_node" pkg="simulation_slam" type="power_computation.py" output="screen"/>
  
  </group>

</launch>